///////////////////////////////////////////////////////////////////////////
///////// This file is generated by proto/gen_proto.py from ///////////////
///////// proto.txt and proto_data.txt, do not edit!!!		///////////////
///////////////////////////////////////////////////////////////////////////
package module
import (
	"fmt"
	"github.com/vmihailenco/msgpack"
)

func decodeInt(n interface{}) int {
	switch n.(type) {
        case int:
            return n.(int)
		case int8:
			return int(n.(int8))
		case int16:
			return int(n.(int16))
		case int32:
			return int(n.(int32))
		case int64:
			return int(n.(int64))
		case uint8:
			return int(n.(int8))
		case uint16:
			return int(n.(uint16))
		case uint32:
			return int(n.(uint32))
		case uint64:
			return int(n.(uint64))
		default:
			return 0
	}
}

func Recv(pConnState *ConnState, buf []byte, data []interface{}) {
	defer func() {
		if x := recover(); x != nil {
			fmt.Println("Error from Recv: ", x)
		}
	}()
	err := msgpack.Unmarshal(buf, &data)
	if err != nil {
		fmt.Println("Error msgpack unpack:", err.Error())
		return
	}
	iProto := decodeInt(data[0])
	// fmt.Println("Receive msg: ", data)
	switch iProto {
		case REGISTERASK:
			var ask = RegisterAsk{Passwd: data[2].(string), Name: data[1].(string)}
			UserRegister(pConnState, ask)
		case LOGINASK:
			var ask = LoginAsk{Passwd: data[2].(string), Name: data[1].(string)}
			UserLogin(pConnState, ask)
		case FRIENDASK:
			var ask = FriendAskPool.Get().(FriendAsk)
			var msg UserMsg = &ask
			if pConnState.UserInfo.ChUser != nil {
				pConnState.UserInfo.ChUser <- msg
			} else {
				SendLoginRsp(pConnState.ChSender, false, 0)
			}
		case RUOKASK:
			var ask = RUOKAskPool.Get().(RUOKAsk)
			ask.Ok = data[1].(bool)
			var msg UserMsg = &ask
			if pConnState.UserInfo.ChUser != nil {
				pConnState.UserInfo.ChUser <- msg
			} else {
				SendLoginRsp(pConnState.ChSender, false, 0)
			}
		case USERMOVEASK:
			var ask = UserMoveAskPool.Get().(UserMoveAsk)
			ask.Y = decodeInt(data[2])
			ask.X = decodeInt(data[1])
			var msg UserMsg = &ask
			if pConnState.UserInfo.ChUser != nil {
				pConnState.UserInfo.ChUser <- msg
			} else {
				SendLoginRsp(pConnState.ChSender, false, 0)
			}
		case ATTACKASK:
			var ask = AttackAskPool.Get().(AttackAsk)
			ask.Entityid = decodeInt(data[1])
			var msg UserMsg = &ask
			if pConnState.UserInfo.ChUser != nil {
				pConnState.UserInfo.ChUser <- msg
			} else {
				SendLoginRsp(pConnState.ChSender, false, 0)
			}
		case PUTBOMBASK:
			var ask = PutBombAskPool.Get().(PutBombAsk)
			ask.Y = decodeInt(data[2])
			ask.X = decodeInt(data[1])
			var msg UserMsg = &ask
			if pConnState.UserInfo.ChUser != nil {
				pConnState.UserInfo.ChUser <- msg
			} else {
				SendLoginRsp(pConnState.ChSender, false, 0)
			}
		default:
			fmt.Println("Error proto id: ", iProto, " and msg data: ", data)
	}
}
